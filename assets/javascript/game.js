$(window).on( "load", function() { //make sure window has finished loading

var imgArray = [
	"assets/images/amethyst.jpg",
	"assets/images/yellow.jpg",
	"assets/images/green.jpg",
	"assets/images/purple.jpg"];
var gemCount = 4; //value specified in assignment
var idRoot = "crystal-"; //will be concatenated with counter as crystal objects are created
var crystalArray = [];//will be filled with crystal objects
var randomNumber = 0;//will be generated by function at start of game
var totalScore = 0;
var gameWins = 0;
var gameLosses = 0;
var minRandomNumber = 19; //value specified in assignment, used in random number generator
var maxRandomNumber = 120;//value specified in assignment, used in random number generator
var minCrystalValue = 1;//value specified in assignment, used in random number generator
var maxCrystalValue = 12;//value specified in assignment, used in random number generator
var gameOver = false; //used as switch to determine when game is reset

//crystal object constructor, holds css id, img src, value of crystal plus methods 
function crystal(id, src) {

	this.crystalID = id;
	this.imgSrc = src;
//initialize with random value
	this.crystalValue = (Math.floor(Math.random() * (maxCrystalValue)) + minCrystalValue); 
	this.getID = function() {
		return this.crystalID;
	};
	this.getSrc = function() {
		return this.imgSrc;
	};
	this.getvalue = function() {
		return this.crystalValue;
	};
//used to reset value when game resets
	this.resetValue = function() {
		this.crystalValue = (Math.floor(Math.random() * (maxCrystalValue)) + minCrystalValue);
		return this.crystalValue;
	};
};

//function to create all crystal objects and store in array
function createCrystalArray() {
	
	var indexCnt, idCnt;

//loop uses gemCount to determine how many crystals to create.  Could have used length of the imgArray, 
//but wanted to allow for possibility of future version where user gets to choose how many gems to create
//initially had 9 images in imgArray so user could choose up to 9, but limited to 4 in accordance with assignment
	for (indexCnt = 0, idCnt = (indexCnt + 1); indexCnt < gemCount; indexCnt++, idCnt++) {

//create unique css id for each object
		var tempID = (idRoot + idCnt);

//get unique img src from imgArray
		var tempImg = imgArray[indexCnt];

//create crystal object with id and img src parameters and feed into crystal array
		crystalArray[indexCnt] = new crystal(tempID, tempImg);
	}
};

//function to insert crystal divs into html
function displayCrystals() {

 //select div (row in table) to append crystal divs (columns) onto  	
   	var crystalDiv = $("#crystalBtns");

 //jquery loop through crystalArray
  	$.each(crystalArray, function(number, crystal){

 //for each crystal object in array, create and append new div with button 
 //using object methods, get css id, value and img from object in array to insert in html
  		crystalDiv.append("<div class='col-md-3'><button type='button' class='btn' id=" + this.getID() + 
  		" value=" + this.getvalue() + "><img src=" + this.getSrc() + " alt='Crystal'></button></div>");
  	 });
 };

//function to create the goal number for game
 function setRandomNumber() {

//create random number between 19-120
 	randomNumber = (Math.floor(Math.random() * (maxRandomNumber - minRandomNumber + 1)) + minRandomNumber);

//display random number generated into existing div on page
 	$("#randomNumber").html(randomNumber);
 };

//function to calculate the user score after each crystal press
function addToScore(value) {

//add the pressed crystal value to the running total score	
	totalScore += parseInt(value);

//update the score displayed on page
	$("#totalScore").html(totalScore);

//call function to compare user score to goal number
	compareNumbers();
};

//function to reset the user score at the beginning of new game
function resetScore() {

//zero out score	
	totalScore = 0;

//update the score displayed on page
	$("#totalScore").html(totalScore);
};

//function to compare user score to goal number
function compareNumbers() {

//if user has gone over goal number, call gameLost function	
	if (totalScore > randomNumber) {
		gameLost();
	}
//if user has reached goal number without going over, call gameWon function
	else if (totalScore === randomNumber) {
		gameWon();
	}
};

//end of game clean up for losing round
function gameLost() {

//increase count for games lost
	gameLosses++;

//set gameOver switch to true
	gameOver = true;

//update the lost game counter on page
	$("#lossCnt").html(gameLosses);

//start new game round
	resetGame();
};

//end of game clean up for winning round
function gameWon() {

//increase count for games won
	gameWins++;

//set gameOver switch to true
	gameOver = true;

//update the won game counter on page
	$("#winCnt").html(gameWins);

//start new game round
	resetGame();
};

//function to reset the hidden crystal values
function resetCrystalValues() {

//jquery loop through crystal object array	
	$.each(crystalArray, function(number, crystal) {

//call the resetValue method in object to reset value
		var tempValue = this.resetValue();

//get the css id for the object, find div on page by id and 
//assign the newly generated value from the object to the crystal button value attribute
		$("#" + this.getID()).attr("value", tempValue);
	});

};

//function to perform maintenance tasks at start of game
function startGame() {
	
	createCrystalArray(); //initialize crystal object array
	displayCrystals();	//display crystals in divs on page
	setRandomNumber();	//calculate the goal number for the game round
};

//function to perform maintenance tasks on game reset
function resetGame() {
	
	resetCrystalValues(); //reset the value of each crystal button
	setRandomNumber();	//calculate the goal number for the game round
	resetScore();	//reset the user score to zero
	gameOver = false; //reset the gameover switch
};

	startGame(); //call function to perform maintenance tasks at start of game

//assign event listener to each crystal button, and when clicked update the user score with the value of that button
	$(".btn").click(function() { addToScore($(this).attr("value"));}) 

//check to see if game is over (user met or exceeded goal number)
	if (gameOver === true) {
		resetGame(); //reset the game for a new round
	}

});